{"mappings":"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","sources":["<anon>","src/scripts/main.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js"],"sourcesContent":["(function () {\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)(this, \"score\", 0);\n        (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)(this, \"playingField\", [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ]);\n        (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)(this, \"initialState\", [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ]);\n        (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)(this, \"status\", Game.const.STATUS_IDLE);\n        if (initialState) {\n            for(var row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++)for(var column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++){\n                this.initialState[row][column] = initialState[row][column];\n                this.playingField[row][column] = initialState[row][column];\n            }\n        }\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            /**\n   * Moves all cells left and compacts them,\n   * then updates the score and game status.\n   */ key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.getStatus() !== Game.const.STATUS_PLAYING) return;\n                var isTrivial = true;\n                for(var rowIndex = 0; rowIndex < Game.const.PLAYING_FIELD_SIZE; rowIndex++){\n                    var row = this.getRow(rowIndex);\n                    var compactionResult = this.compactLine(row);\n                    if (!this.areLinesEqual(row, compactionResult.compacted)) {\n                        isTrivial = false;\n                        this.setRow(rowIndex, compactionResult.compacted);\n                        this.score += compactionResult.score;\n                    }\n                }\n                if (!isTrivial) {\n                    this.populateRandomly(1);\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            /**\n   * Moves all cells right and compacts them,\n   * then updates the score and game status.\n   */ key: \"moveRight\",\n            value: function moveRight() {\n                if (this.getStatus() !== Game.const.STATUS_PLAYING) return;\n                var isTrivial = true;\n                for(var rowIndex = 0; rowIndex < Game.const.PLAYING_FIELD_SIZE; rowIndex++){\n                    var row = this.getRow(rowIndex);\n                    var compactionResult = this.compactLine(row.reverse());\n                    if (!this.areLinesEqual(row, compactionResult.compacted)) {\n                        isTrivial = false;\n                        this.setRow(rowIndex, compactionResult.compacted.reverse());\n                        this.score += compactionResult.score;\n                    }\n                }\n                if (!isTrivial) {\n                    this.populateRandomly(1);\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            /**\n   * Moves all cells up and compacts them,\n   * then updates the score and game status.\n   */ key: \"moveUp\",\n            value: function moveUp() {\n                if (this.getStatus() !== Game.const.STATUS_PLAYING) return;\n                var isTrivial = true;\n                for(var columnIndex = 0; columnIndex < Game.const.PLAYING_FIELD_SIZE; columnIndex++){\n                    var column = this.getColumn(columnIndex);\n                    var compactionResult = this.compactLine(column);\n                    if (!this.areLinesEqual(column, compactionResult.compacted)) {\n                        isTrivial = false;\n                        this.setColumn(columnIndex, compactionResult.compacted);\n                        this.score += compactionResult.score;\n                    }\n                }\n                if (!isTrivial) {\n                    this.populateRandomly(1);\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            /**\n   * Moves all cells down and compacts them,\n   * then updates the score and game status.\n   */ key: \"moveDown\",\n            value: function moveDown() {\n                if (this.getStatus() !== Game.const.STATUS_PLAYING) return;\n                var isTrivial = true;\n                for(var columnIndex = 0; columnIndex < Game.const.PLAYING_FIELD_SIZE; columnIndex++){\n                    var column = this.getColumn(columnIndex);\n                    var compactionResult = this.compactLine(column.reverse());\n                    if (!this.areLinesEqual(column, compactionResult.compacted)) {\n                        isTrivial = false;\n                        this.setColumn(columnIndex, compactionResult.compacted.reverse());\n                        this.score += compactionResult.score;\n                    }\n                }\n                if (!isTrivial) {\n                    this.populateRandomly(1);\n                    this.updateStatus();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                var result = new Array(Game.const.PLAYING_FIELD_SIZE);\n                for(var row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++){\n                    result[row] = new Array(Game.const.PLAYING_FIELD_SIZE);\n                    for(var column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++)result[row][column] = this.playingField[row][column];\n                }\n                return result;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = Game.const.STATUS_PLAYING;\n                this.score = 0;\n                this.populateRandomly(2);\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                for(var row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++)for(var column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++)this.playingField[row][column] = this.initialState[row][column];\n                this.status = Game.const.STATUS_IDLE;\n                this.score = 0;\n            }\n        },\n        {\n            /**\n   * Returns a column by index;\n   * @param {number} index\n   */ key: \"getColumn\",\n            value: function getColumn(index) {\n                var column = new Array(Game.const.PLAYING_FIELD_SIZE);\n                for(var row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++)column[row] = this.playingField[row][index];\n                return column;\n            }\n        },\n        {\n            /**\n   * Sets a column by index;\n   * @param {number} index\n   */ key: \"setColumn\",\n            value: function setColumn(index, column) {\n                for(var row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++)this.playingField[row][index] = column[row];\n            }\n        },\n        {\n            /**\n   * Returns a row by index.\n   *\n   * @param {number} index\n   */ key: \"getRow\",\n            value: function getRow(index) {\n                var row = new Array(Game.const.PLAYING_FIELD_SIZE);\n                for(var column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++)row[column] = this.playingField[index][column];\n                return row;\n            }\n        },\n        {\n            /**\n   * Sets a row by index.\n   *\n   * @param {number} index\n   */ key: \"setRow\",\n            value: function setRow(index, row) {\n                for(var column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++)this.playingField[index][column] = row[column];\n            }\n        },\n        {\n            /**\n   * Returns a 1D array of all cell values. To get 2D version use {getState()}\n   *\n   * @returns {number[]}\n   */ key: \"getCells\",\n            value: function getCells() {\n                var cells = this.playingField.reduce(function(acc, row) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(acc).concat((0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row));\n                }, []);\n                return cells;\n            }\n        },\n        {\n            /**\n   * Returns a 1D array of {IndexedCell}\n   * that contain information about their position in the grid\n   * and their value.\n   *\n   * @typedef {Object} IndexedCell\n   * @property {number} row\n   * @property {number} column\n   * @property {number} value\n   *\n   * @returns {IndexedCell[]}\n   */ key: \"getIndexedCells\",\n            value: function getIndexedCells() {\n                var indexedCells = this.getCells().map(function(value, index) {\n                    var column = index % Game.const.PLAYING_FIELD_SIZE;\n                    var row = (index - column) / Game.const.PLAYING_FIELD_SIZE;\n                    return {\n                        row: row,\n                        column: column,\n                        value: value\n                    };\n                });\n                return indexedCells;\n            }\n        },\n        {\n            /**\n   * Returns a value of a specified game cell.\n   *\n   * @param {number} row\n   * @param {number} column\n   * @returns {number}\n   */ key: \"getCell\",\n            value: function getCell(row, column) {\n                return this.playingField[row][column];\n            }\n        },\n        {\n            /**\n   * Sets a value of a specified game cell.\n   *\n   * @param {number} row\n   * @param {number} column\n   * @param {nunber} value\n   */ key: \"setCell\",\n            value: function setCell(row, column, value) {\n                this.playingField[row][column] = value;\n            }\n        },\n        {\n            /**\n   * Fills some amount of random empty cells with values\n   *\n   * @param {number} count - how many cells to populate\n   */ key: \"populateRandomly\",\n            value: function populateRandomly(count) {\n                var emptyCells = this.getIndexedCells().filter(function(param) {\n                    var value = param.value;\n                    return value === 0;\n                });\n                for(var i = 0; i < count; i++){\n                    if (emptyCells.length === 0) break;\n                    var index = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_index = emptyCells[index], row = _emptyCells_index.row, column = _emptyCells_index.column;\n                    emptyCells.splice(index, 1);\n                    this.setCell(row, column, this.generateCellValue());\n                }\n            }\n        },\n        {\n            /**\n   * Generates a cell value.\n   *\n   * @returns {number}\n   */ key: \"generateCellValue\",\n            value: function generateCellValue() {\n                var t = Math.random();\n                if (t > 0.9) return 4;\n                return 2;\n            }\n        },\n        {\n            /**\n   * Takes the line of numbers and merges equal adjacent cells together,\n   * then pads the result with 0 to {PLAYING_FIELD_SIZE}.\n   *\n   * @typedef {Object} CompactedLine\n   * @param {number[]} compacted\n   * @param {number} score\n   *\n   * @param {number[]} line - a line that needs compacting\n   *\n   * @returns {CompactedLine}\n   */ key: \"compactLine\",\n            value: function compactLine(line) {\n                var numbers = line.filter(function(item) {\n                    return item !== 0;\n                });\n                if (numbers.length < 2) {\n                    this.padWithZeros(numbers);\n                    return {\n                        compacted: numbers,\n                        score: 0\n                    };\n                }\n                var compactedNumbers = [];\n                var compactingScore = 0;\n                for(var i = 0; i < numbers.length; i++){\n                    var current = numbers[i];\n                    var next = numbers[i + 1];\n                    if (current === next) {\n                        compactedNumbers.push(current * 2);\n                        compactingScore += current * 2;\n                        i++;\n                    } else compactedNumbers.push(current);\n                }\n                this.padWithZeros(compactedNumbers);\n                return {\n                    compacted: compactedNumbers,\n                    score: compactingScore\n                };\n            }\n        },\n        {\n            /**\n   * Checks if two game lines are equal.\n   *\n   * @param {number[]} a\n   * @param {number[]} b\n   *\n   * @returns {boolean}\n   */ key: \"areLinesEqual\",\n            value: function areLinesEqual(a, b) {\n                for(var i = 0; i < Game.const.PLAYING_FIELD_SIZE; i++){\n                    if (a[i] !== b[i]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            /**\n   * Pads an array of numbers with 0 to {PLAYING_FIELD_SIZE}\n   * @param {number[]} line\n   * @returns {number[]}\n   */ key: \"padWithZeros\",\n            value: function padWithZeros(line) {\n                while(line.length < Game.const.PLAYING_FIELD_SIZE)line.push(0);\n                return line;\n            }\n        },\n        {\n            /**\n   * Checks if the game is won or lost, and sets {status} accordingly.\n   */ key: \"updateStatus\",\n            value: function updateStatus() {\n                function winCondition(numbers) {\n                    return numbers.some(function(number) {\n                        return number === 2048;\n                    });\n                }\n                function loseCondition(numbers) {\n                    // of some zeros are present, moves are possible\n                    if (numbers.some(function(number) {\n                        return number === 0;\n                    })) return false;\n                    // else check if any hirizontal move is possible\n                    for(var row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++)for(var column = 0; column < Game.const.PLAYING_FIELD_SIZE - 1; column++){\n                        var current = numbers[row * Game.const.PLAYING_FIELD_SIZE + column];\n                        var next = numbers[row * Game.const.PLAYING_FIELD_SIZE + (column + 1)];\n                        if (current === next) return false;\n                    }\n                    // else check if any vertical move is possible\n                    for(var row1 = 0; row1 < Game.const.PLAYING_FIELD_SIZE - 1; row1++)for(var column1 = 0; column1 < Game.const.PLAYING_FIELD_SIZE; column1++){\n                        var current1 = numbers[row1 * Game.const.PLAYING_FIELD_SIZE + column1];\n                        var next1 = numbers[(row1 + 1) * Game.const.PLAYING_FIELD_SIZE + column1];\n                        if (current1 === next1) return false;\n                    }\n                    // if no moves are possible -- game is lost\n                    return true;\n                }\n                var cells = this.getCells();\n                if (winCondition(cells)) this.status = Game.const.STATUS_WIN;\n                else if (loseCondition(cells)) this.status = Game.const.STATUS_LOSE;\n            }\n        }\n    ]);\n    return Game;\n}();\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"const\", Object.freeze({\n    PLAYING_FIELD_SIZE: 4,\n    STATUS_IDLE: \"idle\",\n    STATUS_PLAYING: \"playing\",\n    STATUS_WIN: \"win\",\n    STATUS_LOSE: \"lose\"\n}));\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$debugMode = false;\n// Element queries\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".button.start\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$playingFieldCells = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(document.querySelectorAll(\".field-cell\").values());\nvar $197cd56b15c33885$var$playingField = [];\nfor(var $197cd56b15c33885$var$row = 0; $197cd56b15c33885$var$row < $3d28d7f1aac198f5$exports.const.PLAYING_FIELD_SIZE; $197cd56b15c33885$var$row++){\n    $197cd56b15c33885$var$playingField[$197cd56b15c33885$var$row] = new Array($3d28d7f1aac198f5$exports.const.PLAYING_FIELD_SIZE);\n    for(var $197cd56b15c33885$var$column = 0; $197cd56b15c33885$var$column < $3d28d7f1aac198f5$exports.const.PLAYING_FIELD_SIZE; $197cd56b15c33885$var$column++)$197cd56b15c33885$var$playingField[$197cd56b15c33885$var$row][$197cd56b15c33885$var$column] = $197cd56b15c33885$var$playingFieldCells[$197cd56b15c33885$var$row * $3d28d7f1aac198f5$exports.const.PLAYING_FIELD_SIZE + $197cd56b15c33885$var$column];\n}\n// event listening\n$197cd56b15c33885$var$playingField.forEach(function(row, rowIndex) {\n    row.forEach(function(element, columnIndex) {\n        element.addEventListener(\"click\", function() {\n            $197cd56b15c33885$var$debugIncrementCell(rowIndex, columnIndex);\n        });\n    });\n});\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", $197cd56b15c33885$var$startButtonClickHandler);\ndocument.addEventListener(\"keydown\", $197cd56b15c33885$var$keydownEventHandler);\n// functions\nfunction $197cd56b15c33885$var$startButtonClickHandler() {\n    if ($197cd56b15c33885$var$startButton.classList.contains(\"start\")) {\n        $197cd56b15c33885$var$startButton.classList.replace(\"start\", \"restart\");\n        $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n    }\n    $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n    $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$syncCellValues();\n}\nfunction $197cd56b15c33885$var$keydownEventHandler(keydown) {\n    var needSync = true;\n    switch(keydown.key){\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"F6\":\n            $197cd56b15c33885$var$debugMode = !$197cd56b15c33885$var$debugMode;\n            // eslint-disable-next-line no-console\n            console.log(\"debug mode: \".concat($197cd56b15c33885$var$debugMode));\n            needSync = false;\n            break;\n        default:\n            needSync = false;\n            break;\n    }\n    if (needSync) {\n        switch($197cd56b15c33885$var$game.getStatus()){\n            case $3d28d7f1aac198f5$exports.const.STATUS_WIN:\n                $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n                break;\n            case $3d28d7f1aac198f5$exports.const.STATUS_LOSE:\n                $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n                break;\n        }\n        $197cd56b15c33885$var$syncCellValues();\n    }\n}\nfunction $197cd56b15c33885$var$syncCellValues() {\n    for(var row = 0; row < $3d28d7f1aac198f5$exports.const.PLAYING_FIELD_SIZE; row++)for(var column = 0; column < $3d28d7f1aac198f5$exports.const.PLAYING_FIELD_SIZE; column++){\n        var viewCell = $197cd56b15c33885$var$playingField[row][column];\n        var value = $197cd56b15c33885$var$game.getCell(row, column);\n        for(var n = 2; n <= 2048; n *= 2)viewCell.classList.remove(\"field-cell--\".concat(n));\n        if (value === 0) viewCell.textContent = \"\";\n        else {\n            viewCell.textContent = \"\".concat(value);\n            viewCell.classList.add(\"field-cell--\".concat(value));\n        }\n    }\n    $197cd56b15c33885$var$score.textContent = $197cd56b15c33885$var$game.getScore().toString();\n}\nfunction $197cd56b15c33885$var$debugIncrementCell(row, column) {\n    if ($197cd56b15c33885$var$debugMode) {\n        var n = $197cd56b15c33885$var$game.getCell(row, column);\n        if (n === 0) $197cd56b15c33885$var$game.setCell(row, column, 2);\n        else if (n === 2048) $197cd56b15c33885$var$game.setCell(row, column, 0);\n        else $197cd56b15c33885$var$game.setCell(row, column, n * 2);\n        $197cd56b15c33885$var$syncCellValues();\n    }\n}\n\n})();\n//# sourceMappingURL=index.f747f80c.js.map\n","'use strict';\n\n// Is it just me, or this script is really ugly?\n\n// Model access\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nlet debugMode = false;\n\n// Element queries\nconst score = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst playingFieldCells = [\n  ...document.querySelectorAll('.field-cell').values(),\n];\n\nconst playingField = [];\n\nfor (let row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++) {\n  playingField[row] = new Array(Game.const.PLAYING_FIELD_SIZE);\n\n  for (let column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++) {\n    playingField[row][column] =\n      playingFieldCells[row * Game.const.PLAYING_FIELD_SIZE + column];\n  }\n}\n\n// event listening\nplayingField.forEach((row, rowIndex) => {\n  row.forEach((element, columnIndex) => {\n    element.addEventListener('click', () => {\n      debugIncrementCell(rowIndex, columnIndex);\n    });\n  });\n});\n\nstartButton.addEventListener('click', startButtonClickHandler);\ndocument.addEventListener('keydown', keydownEventHandler);\n\n// functions\nfunction startButtonClickHandler() {\n  if (startButton.classList.contains('start')) {\n    startButton.classList.replace('start', 'restart');\n    startButton.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n  }\n\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  game.restart();\n  game.start();\n  syncCellValues();\n}\n\nfunction keydownEventHandler(keydown) {\n  let needSync = true;\n\n  switch (keydown.key) {\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'F6':\n      debugMode = !debugMode;\n      // eslint-disable-next-line no-console\n      console.log(`debug mode: ${debugMode}`);\n      needSync = false;\n      break;\n    default:\n      needSync = false;\n      break;\n  }\n\n  if (needSync) {\n    switch (game.getStatus()) {\n      case Game.const.STATUS_WIN:\n        messageWin.classList.remove('hidden');\n        break;\n      case Game.const.STATUS_LOSE:\n        messageLose.classList.remove('hidden');\n        break;\n    }\n\n    syncCellValues();\n  }\n}\n\nfunction syncCellValues() {\n  for (let row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++) {\n    for (let column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++) {\n      const viewCell = playingField[row][column];\n      const value = game.getCell(row, column);\n\n      for (let n = 2; n <= 2048; n *= 2) {\n        viewCell.classList.remove(`field-cell--${n}`);\n      }\n\n      if (value === 0) {\n        viewCell.textContent = ``;\n      } else {\n        viewCell.textContent = `${value}`;\n        viewCell.classList.add(`field-cell--${value}`);\n      }\n    }\n  }\n\n  score.textContent = game.getScore().toString();\n}\n\nfunction debugIncrementCell(row, column) {\n  if (debugMode) {\n    const n = game.getCell(row, column);\n\n    if (n === 0) {\n      game.setCell(row, column, 2);\n    } else if (n === 2048) {\n      game.setCell(row, column, 0);\n    } else {\n      game.setCell(row, column, n * 2);\n    }\n\n    syncCellValues();\n  }\n}\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","'use strict';\n\nclass Game {\n  static const = Object.freeze({\n    PLAYING_FIELD_SIZE: 4,\n    STATUS_IDLE: 'idle',\n    STATUS_PLAYING: 'playing',\n    STATUS_WIN: 'win',\n    STATUS_LOSE: 'lose',\n  });\n\n  score = 0;\n  playingField = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  initialState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  status = Game.const.STATUS_IDLE;\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    if (initialState) {\n      for (let row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++) {\n        for (let column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++) {\n          this.initialState[row][column] = initialState[row][column];\n          this.playingField[row][column] = initialState[row][column];\n        }\n      }\n    }\n  }\n\n  /**\n   * Moves all cells left and compacts them,\n   * then updates the score and game status.\n   */\n  moveLeft() {\n    if (this.getStatus() !== Game.const.STATUS_PLAYING) {\n      return;\n    }\n\n    let isTrivial = true;\n\n    for (\n      let rowIndex = 0;\n      rowIndex < Game.const.PLAYING_FIELD_SIZE;\n      rowIndex++\n    ) {\n      const row = this.getRow(rowIndex);\n\n      const compactionResult = this.compactLine(row);\n\n      if (!this.areLinesEqual(row, compactionResult.compacted)) {\n        isTrivial = false;\n\n        this.setRow(rowIndex, compactionResult.compacted);\n        this.score += compactionResult.score;\n      }\n    }\n\n    if (!isTrivial) {\n      this.populateRandomly(1);\n      this.updateStatus();\n    }\n  }\n\n  /**\n   * Moves all cells right and compacts them,\n   * then updates the score and game status.\n   */\n  moveRight() {\n    if (this.getStatus() !== Game.const.STATUS_PLAYING) {\n      return;\n    }\n\n    let isTrivial = true;\n\n    for (\n      let rowIndex = 0;\n      rowIndex < Game.const.PLAYING_FIELD_SIZE;\n      rowIndex++\n    ) {\n      const row = this.getRow(rowIndex);\n\n      const compactionResult = this.compactLine(row.reverse());\n\n      if (!this.areLinesEqual(row, compactionResult.compacted)) {\n        isTrivial = false;\n\n        this.setRow(rowIndex, compactionResult.compacted.reverse());\n        this.score += compactionResult.score;\n      }\n    }\n\n    if (!isTrivial) {\n      this.populateRandomly(1);\n      this.updateStatus();\n    }\n  }\n\n  /**\n   * Moves all cells up and compacts them,\n   * then updates the score and game status.\n   */\n  moveUp() {\n    if (this.getStatus() !== Game.const.STATUS_PLAYING) {\n      return;\n    }\n\n    let isTrivial = true;\n\n    for (\n      let columnIndex = 0;\n      columnIndex < Game.const.PLAYING_FIELD_SIZE;\n      columnIndex++\n    ) {\n      const column = this.getColumn(columnIndex);\n\n      const compactionResult = this.compactLine(column);\n\n      if (!this.areLinesEqual(column, compactionResult.compacted)) {\n        isTrivial = false;\n\n        this.setColumn(columnIndex, compactionResult.compacted);\n        this.score += compactionResult.score;\n      }\n    }\n\n    if (!isTrivial) {\n      this.populateRandomly(1);\n      this.updateStatus();\n    }\n  }\n\n  /**\n   * Moves all cells down and compacts them,\n   * then updates the score and game status.\n   */\n  moveDown() {\n    if (this.getStatus() !== Game.const.STATUS_PLAYING) {\n      return;\n    }\n\n    let isTrivial = true;\n\n    for (\n      let columnIndex = 0;\n      columnIndex < Game.const.PLAYING_FIELD_SIZE;\n      columnIndex++\n    ) {\n      const column = this.getColumn(columnIndex);\n\n      const compactionResult = this.compactLine(column.reverse());\n\n      if (!this.areLinesEqual(column, compactionResult.compacted)) {\n        isTrivial = false;\n\n        this.setColumn(columnIndex, compactionResult.compacted.reverse());\n        this.score += compactionResult.score;\n      }\n    }\n\n    if (!isTrivial) {\n      this.populateRandomly(1);\n      this.updateStatus();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    const result = new Array(Game.const.PLAYING_FIELD_SIZE);\n\n    for (let row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++) {\n      result[row] = new Array(Game.const.PLAYING_FIELD_SIZE);\n\n      for (let column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++) {\n        result[row][column] = this.playingField[row][column];\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = Game.const.STATUS_PLAYING;\n    this.score = 0;\n\n    this.populateRandomly(2);\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    for (let row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++) {\n      for (let column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++) {\n        this.playingField[row][column] = this.initialState[row][column];\n      }\n    }\n\n    this.status = Game.const.STATUS_IDLE;\n    this.score = 0;\n  }\n\n  /**\n   * Returns a column by index;\n   * @param {number} index\n   */\n  getColumn(index) {\n    const column = new Array(Game.const.PLAYING_FIELD_SIZE);\n\n    for (let row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++) {\n      column[row] = this.playingField[row][index];\n    }\n\n    return column;\n  }\n\n  /**\n   * Sets a column by index;\n   * @param {number} index\n   */\n  setColumn(index, column) {\n    for (let row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++) {\n      this.playingField[row][index] = column[row];\n    }\n  }\n\n  /**\n   * Returns a row by index.\n   *\n   * @param {number} index\n   */\n  getRow(index) {\n    const row = new Array(Game.const.PLAYING_FIELD_SIZE);\n\n    for (let column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++) {\n      row[column] = this.playingField[index][column];\n    }\n\n    return row;\n  }\n\n  /**\n   * Sets a row by index.\n   *\n   * @param {number} index\n   */\n  setRow(index, row) {\n    for (let column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++) {\n      this.playingField[index][column] = row[column];\n    }\n  }\n\n  /**\n   * Returns a 1D array of all cell values. To get 2D version use {getState()}\n   *\n   * @returns {number[]}\n   */\n  getCells() {\n    const cells = this.playingField.reduce((acc, row) => [...acc, ...row], []);\n\n    return cells;\n  }\n\n  /**\n   * Returns a 1D array of {IndexedCell}\n   * that contain information about their position in the grid\n   * and their value.\n   *\n   * @typedef {Object} IndexedCell\n   * @property {number} row\n   * @property {number} column\n   * @property {number} value\n   *\n   * @returns {IndexedCell[]}\n   */\n  getIndexedCells() {\n    const indexedCells = this.getCells().map((value, index) => {\n      const column = index % Game.const.PLAYING_FIELD_SIZE;\n      const row = (index - column) / Game.const.PLAYING_FIELD_SIZE;\n\n      return { row, column, value };\n    });\n\n    return indexedCells;\n  }\n\n  /**\n   * Returns a value of a specified game cell.\n   *\n   * @param {number} row\n   * @param {number} column\n   * @returns {number}\n   */\n  getCell(row, column) {\n    return this.playingField[row][column];\n  }\n\n  /**\n   * Sets a value of a specified game cell.\n   *\n   * @param {number} row\n   * @param {number} column\n   * @param {nunber} value\n   */\n  setCell(row, column, value) {\n    this.playingField[row][column] = value;\n  }\n\n  /**\n   * Fills some amount of random empty cells with values\n   *\n   * @param {number} count - how many cells to populate\n   */\n  populateRandomly(count) {\n    const emptyCells = this.getIndexedCells().filter(\n      ({ value }) => value === 0,\n    );\n\n    for (let i = 0; i < count; i++) {\n      if (emptyCells.length === 0) {\n        break;\n      }\n\n      const index = Math.floor(Math.random() * emptyCells.length);\n      const { row, column } = emptyCells[index];\n\n      emptyCells.splice(index, 1);\n\n      this.setCell(row, column, this.generateCellValue());\n    }\n  }\n\n  /**\n   * Generates a cell value.\n   *\n   * @returns {number}\n   */\n  generateCellValue() {\n    const t = Math.random();\n\n    if (t > 0.9) {\n      return 4;\n    }\n\n    return 2;\n  }\n\n  /**\n   * Takes the line of numbers and merges equal adjacent cells together,\n   * then pads the result with 0 to {PLAYING_FIELD_SIZE}.\n   *\n   * @typedef {Object} CompactedLine\n   * @param {number[]} compacted\n   * @param {number} score\n   *\n   * @param {number[]} line - a line that needs compacting\n   *\n   * @returns {CompactedLine}\n   */\n  compactLine(line) {\n    const numbers = line.filter((item) => item !== 0);\n\n    if (numbers.length < 2) {\n      this.padWithZeros(numbers);\n\n      return {\n        compacted: numbers,\n        score: 0,\n      };\n    }\n\n    const compactedNumbers = [];\n    let compactingScore = 0;\n\n    for (let i = 0; i < numbers.length; i++) {\n      const current = numbers[i];\n      const next = numbers[i + 1];\n\n      if (current === next) {\n        compactedNumbers.push(current * 2);\n        compactingScore += current * 2;\n        i++;\n      } else {\n        compactedNumbers.push(current);\n      }\n    }\n\n    this.padWithZeros(compactedNumbers);\n\n    return {\n      compacted: compactedNumbers,\n      score: compactingScore,\n    };\n  }\n\n  /**\n   * Checks if two game lines are equal.\n   *\n   * @param {number[]} a\n   * @param {number[]} b\n   *\n   * @returns {boolean}\n   */\n  areLinesEqual(a, b) {\n    for (let i = 0; i < Game.const.PLAYING_FIELD_SIZE; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Pads an array of numbers with 0 to {PLAYING_FIELD_SIZE}\n   * @param {number[]} line\n   * @returns {number[]}\n   */\n  padWithZeros(line) {\n    while (line.length < Game.const.PLAYING_FIELD_SIZE) {\n      line.push(0);\n    }\n\n    return line;\n  }\n\n  /**\n   * Checks if the game is won or lost, and sets {status} accordingly.\n   */\n  updateStatus() {\n    function winCondition(numbers) {\n      return numbers.some((number) => number === 2048);\n    }\n\n    function loseCondition(numbers) {\n      // of some zeros are present, moves are possible\n      if (numbers.some((number) => number === 0)) {\n        return false;\n      }\n\n      // else check if any hirizontal move is possible\n      for (let row = 0; row < Game.const.PLAYING_FIELD_SIZE; row++) {\n        for (\n          let column = 0;\n          column < Game.const.PLAYING_FIELD_SIZE - 1;\n          column++\n        ) {\n          const current = numbers[row * Game.const.PLAYING_FIELD_SIZE + column];\n\n          const next =\n            numbers[row * Game.const.PLAYING_FIELD_SIZE + (column + 1)];\n\n          if (current === next) {\n            return false;\n          }\n        }\n      }\n\n      // else check if any vertical move is possible\n      for (let row = 0; row < Game.const.PLAYING_FIELD_SIZE - 1; row++) {\n        for (let column = 0; column < Game.const.PLAYING_FIELD_SIZE; column++) {\n          const current = numbers[row * Game.const.PLAYING_FIELD_SIZE + column];\n\n          const next =\n            numbers[(row + 1) * Game.const.PLAYING_FIELD_SIZE + column];\n\n          if (current === next) {\n            return false;\n          }\n        }\n      }\n\n      // if no moves are possible -- game is lost\n      return true;\n    }\n\n    const cells = this.getCells();\n\n    if (winCondition(cells)) {\n      this.status = Game.const.STATUS_WIN;\n    } else if (loseCondition(cells)) {\n      this.status = Game.const.STATUS_LOSE;\n    }\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n"],"names":["$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$3d28d7f1aac198f5$exports","$cd5a47cf8ef6d766$export$1e71eb4bef00f6b0","obj","key","value","defineProperty","enumerable","configurable","writable","$3d28d7f1aac198f5$var$Game","protoProps","Game","initialState","instance","Constructor","const","STATUS_IDLE","row","PLAYING_FIELD_SIZE","column","playingField","getStatus","STATUS_PLAYING","isTrivial","rowIndex","getRow","compactionResult","compactLine","areLinesEqual","compacted","setRow","score","populateRandomly","updateStatus","reverse","columnIndex","getColumn","setColumn","result","status","index","reduce","acc","concat","getCells","map","count","emptyCells","getIndexedCells","filter","param","Math","floor","random","_emptyCells_index","splice","setCell","generateCellValue","t","line","numbers","item","padWithZeros","compactedNumbers","compactingScore","current","push","a","b","cells","some","number","STATUS_WIN","loseCondition","row1","column1","current1","STATUS_LOSE","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","freeze","$197cd56b15c33885$var$game","$197cd56b15c33885$var$debugMode","$197cd56b15c33885$var$score","document","querySelector","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$playingFieldCells","querySelectorAll","values","$197cd56b15c33885$var$playingField","$197cd56b15c33885$var$row","$197cd56b15c33885$var$column","$197cd56b15c33885$var$syncCellValues","viewCell","getCell","classList","remove","textContent","add","getScore","forEach","element","addEventListener","$197cd56b15c33885$var$debugIncrementCell","contains","replace","restart","start","keydown","needSync","moveRight","moveLeft","moveUp","moveDown","console","log"],"version":3,"file":"index.f747f80c.js.map"}